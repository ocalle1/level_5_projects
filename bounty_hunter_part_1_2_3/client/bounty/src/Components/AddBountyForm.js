import React, { useState } from "react";





export default function AddBountyForm(props) {
    // When value={inputs.firstName}/input(State) exectues; Each property is checked like firstName - props.firstName||"" - if it exist the value is assigned to firstName OR(||) empty string displays.
    const initInputs = {
        firstName: props.firstName || "",
        lastName: props.lastName || "",
        living: props.living || "",
        amount: props.amount || "",
        type: props.type || ""
    }
    const [inputs, setInputs] = useState(initInputs)

    function handleChange(e) { // the (e) represents the event object generated by the onChange event in the <input/>
        const { name, value } = e.target // e.target = object representing the element(trigger => <input/>) that triggers the event
        // {name,value} - destructured from <input/> which were its property and assigns them as variables. Whatever value is given to either that is what will be displayed 
        setInputs(prevInputs => ({ ...prevInputs, [name]: value }))
        // setInputs updates inputs(State)
        //the callback function - creates new object using a sprad operator (...) that copies the prevInputs object.
        // [name]:value - name value enclosed within [] becomes a property and the value is the corresponding value assigned to that property (example name:firstName value:"John" [name]:value will evaluate to {firstName:"John"})
    }

    function handleSubmit(e) {
        e.preventDefault() //when form is submitted page doesn't refresh
        props.submit(inputs, props._id)
        //props.submit - is the object that contains the property passed to the Component. Here it would mean that function from App.js addBounty will be executed
        // inputs - current form input values stored in the State
        // props._id - property passed to this Component which came from route "/bouty" which holds all of the object data of the const initInputs
        setInputs(initInputs) // updates (inputs State) and posts request POST requests
    }
    return (
        <>
            <form onSubmit={handleSubmit}>
                <input
                    type="text"
                    name="firstName" // needed for the key-value pair - name = key value = its pair with one the other wont work
                    value={inputs.firstName} //will display value stored in the State value
                    onChange={handleChange} // onChange is crutial for value to work
                    placeholder="First Name" />
                <input
                    type="text"
                    name="lastName"
                    value={inputs.lastName}
                    onChange={handleChange}
                    placeholder="Last Name" />
                <input
                    text="text"//not sure if this is right?????????????
                    name="living"
                    value={inputs.living}
                    onChange={handleChange}
                    placeholder="Living" />
                <input
                    text="number"
                    name="amount"
                    value={inputs.amount}
                    onChange={handleChange}
                    placeholder="Amount" />
                <input
                    text="text"
                    name="type"
                    value={inputs.type}
                    onChange={handleChange}
                    placeholder="Type" />

                {/* btnText belongs to btnText="Add Bounty" in App.js as a AddBountyForm props. That when executed it runs the POST function*/}
                <button>{props.btnText}</button>
            </form>
        </>
    )
};